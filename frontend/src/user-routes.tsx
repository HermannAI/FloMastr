// THIS FILE IS AUTOGENERATED WHEN PAGES ARE UPDATED
import { lazy } from "react";
import { RouteObject } from "react-router-dom";


const AdminDashboard = lazy(() => import("./pages/AdminDashboard.tsx"));
const AdminPolicies = lazy(() => import("./pages/AdminPolicies.tsx"));
const AdminProvisioning = lazy(() => import("./pages/AdminProvisioning.tsx"));
const AdminTenants = lazy(() => import("./pages/AdminTenants.tsx"));
const AdminUsers = lazy(() => import("./pages/AdminUsers.tsx"));
const AdminWABATemplates = lazy(() => import("./pages/AdminWABATemplates.tsx"));
const App = lazy(() => import("./pages/App.tsx"));
const ContextBuilder = lazy(() => import("./pages/ContextBuilder.tsx"));
const HitlTasks = lazy(() => import("./pages/HitlTasks.tsx"));
const Login = lazy(() => import("./pages/Login.tsx"));
const Settings = lazy(() => import("./pages/Settings.tsx"));
const Task = lazy(() => import("./pages/Task.tsx"));
const TenantAuth = lazy(() => import("./pages/TenantAuth.tsx"));
const TestContextBuilder = lazy(() => import("./pages/TestContextBuilder.tsx"));
const TestMutationPage = lazy(() => import("./pages/TestMutationPage.tsx"));
const WorkflowInstall = lazy(() => import("./pages/WorkflowInstall.tsx"));
const Workflows = lazy(() => import("./pages/Workflows.tsx"));

export const userRoutes: RouteObject[] = [
	// Admin routes (no tenant prefix needed)
	{ path: "/admin-dashboard", element: <AdminDashboard />},
	{ path: "/admindashboard", element: <AdminDashboard />},
	{ path: "/admin-policies", element: <AdminPolicies />},
	{ path: "/adminpolicies", element: <AdminPolicies />},
	{ path: "/admin-provisioning", element: <AdminProvisioning />},
	{ path: "/adminprovisioning", element: <AdminProvisioning />},
	{ path: "/admin-tenants", element: <AdminTenants />},
	{ path: "/admintenants", element: <AdminTenants />},
	{ path: "/admin-users", element: <AdminUsers />},
	{ path: "/adminusers", element: <AdminUsers />},
	{ path: "/admin-waba-templates", element: <AdminWABATemplates />},
	{ path: "/adminwabatemplates", element: <AdminWABATemplates />},
	
	// Root and auth routes
	{ path: "/", element: <App />},
	{ path: "/login", element: <Login />},
	{ path: "/login/*", element: <Login />}, // Catch-all for Clerk auth routes like /login/factor-one
	{ path: "/sign-in", element: <Login />},
	{ path: "/sign-in/*", element: <Login />},
	{ path: "/sign-up", element: <Login />},
	{ path: "/sign-up/*", element: <Login />},
	{ path: "/auth/redirect", element: <div>Redirecting...</div>}, // Auth redirect handler - just shows loading while redirect happens
	{ path: "/tenant-auth", element: <TenantAuth />},
	{ path: "/tenantauth", element: <TenantAuth />},
	
	// Test/development routes
	{ path: "/test-context-builder", element: <TestContextBuilder />},
	{ path: "/testcontextbuilder", element: <TestContextBuilder />},
	{ path: "/test-mutation-page", element: <TestMutationPage />},
	{ path: "/testmutationpage", element: <TestMutationPage />},
	
	// Tenant-prefixed routes (path-based tenant architecture: /tenantSlug/page)
	{ path: "/:tenantSlug/hitl-tasks", element: <HitlTasks />},
	{ path: "/:tenantSlug/settings", element: <Settings />},
	{ path: "/:tenantSlug/workflows", element: <Workflows />},
	{ path: "/:tenantSlug/context-builder", element: <ContextBuilder />},
	{ path: "/:tenantSlug/contextbuilder", element: <ContextBuilder />},
	{ path: "/:tenantSlug/task", element: <Task />},
	{ path: "/:tenantSlug/workflow-install", element: <WorkflowInstall />},
	{ path: "/:tenantSlug/workflowinstall", element: <WorkflowInstall />},
];
