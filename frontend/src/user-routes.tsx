
// THIS FILE IS AUTOGENERATED WHEN PAGES ARE UPDATED
import { lazy } from "react";
import { RouteObject } from "react-router-dom";


import { UserGuard } from "app";


import { StackHandlerRoutes, LoginRedirect } from "app/auth";


const AdminDashboard = lazy(() => import("./pages/AdminDashboard.tsx"));
const AdminPolicies = lazy(() => import("./pages/AdminPolicies.tsx"));
const AdminProvisioning = lazy(() => import("./pages/AdminProvisioning.tsx"));
const AdminTenants = lazy(() => import("./pages/AdminTenants.tsx"));
const AdminUsers = lazy(() => import("./pages/AdminUsers.tsx"));
const AdminWABATemplates = lazy(() => import("./pages/AdminWABATemplates.tsx"));
const App = lazy(() => import("./pages/App.tsx"));
const ContextBuilder = lazy(() => import("./pages/ContextBuilder.tsx"));
const HitlTasks = lazy(() => import("./pages/HitlTasks.tsx"));
const Login = lazy(() => import("./pages/Login.tsx"));
const Settings = lazy(() => import("./pages/Settings.tsx"));
const Task = lazy(() => import("./pages/Task.tsx"));
const TenantAuth = lazy(() => import("./pages/TenantAuth.tsx"));
const TestContextBuilder = lazy(() => import("./pages/TestContextBuilder.tsx"));
const TestMutationPage = lazy(() => import("./pages/TestMutationPage.tsx"));
const WorkflowInstall = lazy(() => import("./pages/WorkflowInstall.tsx"));
const Workflows = lazy(() => import("./pages/Workflows.tsx"));

export const userRoutes: RouteObject[] = [

	{ path: "/auth/redirect", element: <LoginRedirect />},
	{ path: "/auth/*", element: <StackHandlerRoutes />},
	{ path: "/admin-dashboard", element: <UserGuard><AdminDashboard /></UserGuard>},
	{ path: "/admindashboard", element: <UserGuard><AdminDashboard /></UserGuard>},
	{ path: "/admin-policies", element: <UserGuard><AdminPolicies /></UserGuard>},
	{ path: "/adminpolicies", element: <UserGuard><AdminPolicies /></UserGuard>},
	{ path: "/admin-provisioning", element: <UserGuard><AdminProvisioning /></UserGuard>},
	{ path: "/adminprovisioning", element: <UserGuard><AdminProvisioning /></UserGuard>},
	{ path: "/admin-tenants", element: <UserGuard><AdminTenants /></UserGuard>},
	{ path: "/admintenants", element: <UserGuard><AdminTenants /></UserGuard>},
	{ path: "/admin-users", element: <UserGuard><AdminUsers /></UserGuard>},
	{ path: "/adminusers", element: <UserGuard><AdminUsers /></UserGuard>},
	{ path: "/admin-waba-templates", element: <UserGuard><AdminWABATemplates /></UserGuard>},
	{ path: "/adminwabatemplates", element: <UserGuard><AdminWABATemplates /></UserGuard>},
	{ path: "/", element: <App />},
	{ path: "/context-builder", element: <UserGuard><ContextBuilder /></UserGuard>},
	{ path: "/contextbuilder", element: <UserGuard><ContextBuilder /></UserGuard>},
	{ path: "/hitl-tasks", element: <UserGuard><HitlTasks /></UserGuard>},
	{ path: "/hitltasks", element: <UserGuard><HitlTasks /></UserGuard>},
	{ path: "/login", element: <Login />},
	{ path: "/settings", element: <UserGuard><Settings /></UserGuard>},
	{ path: "/task", element: <UserGuard><Task /></UserGuard>},
	{ path: "/tenant-auth", element: <UserGuard><TenantAuth /></UserGuard>},
	{ path: "/tenantauth", element: <UserGuard><TenantAuth /></UserGuard>},
	{ path: "/test-context-builder", element: <UserGuard><TestContextBuilder /></UserGuard>},
	{ path: "/testcontextbuilder", element: <UserGuard><TestContextBuilder /></UserGuard>},
	{ path: "/test-mutation-page", element: <UserGuard><TestMutationPage /></UserGuard>},
	{ path: "/testmutationpage", element: <UserGuard><TestMutationPage /></UserGuard>},
	{ path: "/workflow-install", element: <UserGuard><WorkflowInstall /></UserGuard>},
	{ path: "/workflowinstall", element: <UserGuard><WorkflowInstall /></UserGuard>},
	{ path: "/workflows", element: <UserGuard><Workflows /></UserGuard>},

];
